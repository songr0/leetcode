注意边界条件（终止条件写在前）

状态变化

剪枝

注意特殊情况和特殊要求

题目139 单词拆分 动态规划加记忆化/剪枝
例如，对于字符串“abcabd”, 其结果依赖于“abcab”,
因此“abcab”是否可以被匹配应当作为“abcabd”能够被匹配的前提条件之一，
另外一个条件则是字典中是否包含字符串“d”。

需要注意的是，字符串的匹配不同于字符匹配，每次匹配成功之后，下一个起始下标不是加1，而是移动到上一个已匹配字符串的末端，
故需要一个变量来记录该下标的位置。
实际代码如下：
public boolean wordBreak(String s, List<String> wordDict) {
        if(s.length() == 0){
            return true;
        }
        // 记录前i个字符串是否能匹配上, 用于剪枝
        boolean[] memo = new boolean[s.length()];
        return match(s, wordDict, memo, 0);
    }

    boolean match(String s, List<String> wordDict, boolean[] memo, int index){
        int len = s.length();
        if(index == len){
            return true;
        }
        if(memo[index]){
            return false;
        }
        for(int i = index+1;i<= len;++i){
            String temp = s.substring(index, i);
            if(wordDict.contains(temp) && match(s, wordDict, memo, i)){
                return true;
            }
        }
        memo[index] = true;
        return false;
    }



   